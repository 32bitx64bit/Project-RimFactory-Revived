<?xml version="1.0" encoding="utf-8"?>
<Defs>
  <!-- 
Mod extennsion for assemblers
  <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <importRecipesFrom>               import bills from a existing workbench, more then 1 can be used
          <li>ElectricStove</li>
        </importRecipesFrom>
        <workSpeedBaseFactor>2</workSpeedBaseFactor> Workspeed boost normal = 1
        <skillLevel>20</skillLevel>       skill level set all skill to XX if not set skill = 10
        <workingGraphicData>  Working texture swap
          <graphicClass>Graphic_Single</graphicClass>
          <texPath>SAL3/SpacerCookerWorking</texPath>
          <drawSize>(3,3)</drawSize>
        </workingGraphicData>
        <drawStatus>true</drawStatus>     Show working/idle status
        <doEffect>true</doEffect>         Sound and visual effect activate
        <overrideRecipeEffecter>          List of Recipe and Effecter to overwrite.

          <RecipeDef.defName Effecter="EffecterDef.defName" Sound="SoundDef.defName" />     Override a specific recipe effect and sound
          RecipeDef - see RimWorld\Data\Core\Defs\RecipeDefs\Recipes_*.xml                  find recipeDef here
          EffecterDef - see RimWorld\Data\Core\Defs\Effects\Effecter_*.xml                  find effectDef here
          SoundDef - see RimWorld\Data\Core\Defs\SoundDefs\*_Sustainers_*.xml               find soundDef here

        <CookMealSimple Effecter="Repair" />                                               example
        <CookMealSimpleBulk Effecter="ButcherFlesh" Sound="Recipe_ButcherCorpseFlesh" />   example
        </overrideRecipeEffecter>

        <defaultEffecter>Drill</defaultEffecter>        
        Effect that is used when RecipeDef.effectWorking and RecipeDef.soundWorking does not exist or is not defined in overrideRecipeEffecter.
        <defaultSound></defaultSound>
      </li>
  </modExtensions> 
  <comps>
      <li Class="ProjectRimFactory.Common.CompProperties_GlowerPulse">    Comp for pulseglow when working
        <minGlowRadius>1</minGlowRadius>                                  smallest size
        <maxGlowRadius>3</maxGlowRadius>                                  largest size
        <minGlowColor>(100,0,0,10)</minGlowColor>                         color and opacity when smallest
        <maxGlowColor>(230,0,0,100)</maxGlowColor>                        color and opacity when largest
        <intervalTicks>30</intervalTicks>                                 interval
        easingType : EasingLinear, EasingSineInOut, EasingQuadInOut, EasingCubicInOut, EasingExpInOut, EasingElasticInOut, EasingBounceInOut, EasingQuadIn, EasingQuadOut, EasingCubicIn, EasingCubicOut https://easings.net/en
        <easingType>ProjectRimFactory.Common.EasingCubicIn</easingType>   Type pulse see above link for types
      </li>
      <li Class="ProjectRimFactory.Common.CompProperties_PowerWorkSetting">
        speed settings
        <speedSetting>true</speedSetting>
        <minPowerForSpeed>0</minPowerForSpeed>
        <minSpeedFactor>1</minSpeedFactor>
        <maxPowerForSpeed>3000</maxPowerForSpeed>
        <maxSpeedFactor>2</maxSpeedFactor>
        range settings
        <rangeSetting>true</rangeSetting>
        <minPowerForRange>0</minPowerForRange>
        <minRange>1</minRange>
        <maxPowerForRange>1000</maxPowerForRange>
        <maxRange>3</maxRange>
        <rangeType>ProjectRimFactory.Common.RectRange</rangeType>
        range color settings
        <blueprintMin>(1,1,1,1)</blueprintMin>
        <blueprintMax>(0.5,0.5,0.5,0.6)</blueprintMax>
        <instance>(1,1,1,1)</instance>
        <otherInstance>(1,1,1,0.35)</otherInstance>
      </li>
  </comps>
    -->


  <DesignatorDropdownGroupDef>    <!-- Create Downdown group, one for each dropdown -->
    <defName>assembler_gr</defName>
  </DesignatorDropdownGroupDef>
  <DesignatorDropdownGroupDef>
    <defName>assembler_food_gr</defName>
  </DesignatorDropdownGroupDef>

  <!--====================AssemblerBase====================-->  <!-- This is a set of base values that can be overwrited by child defs by insert same tag and edit value -->
  <ThingDef Name="PRF_AssemblerBase" ParentName="PRFBuildingBase" Abstract="True">    <!-- this is a base for assemblers and a child of PRFBuildingBase -->
    <!-- Abstract is set to True. This makes it so that the contents of this tag aren't instantiated, which in practice means the contents of it can only be inherited by other tags and won't be loaded into the game because its only purpose is in inheritance, in being a parent. -->
    <statBases>
      <MaxHitPoints>150</MaxHitPoints>      <!-- structure HP -->
      <Flammability>1.0</Flammability>      <!-- A thing with a Flammability of 0.0 won't start burning at all, while one with a Flammability of 1.0 will start burning very quickly. -->
      <Beauty>-1</Beauty>      <!-- +is good -is bad ;) -->
      <Mass>70</Mass>      <!-- mass in kg -->
    </statBases>
    <graphicData>
      <graphicClass>Graphic_Single</graphicClass>      <!-- Graphic_Multi, Graphic_Single chose that type texture used -->
      <drawSize>(3,3)</drawSize>      <!-- Scale texture up/down to fit -->
      <!-- <shaderType></shaderType> -->      <!-- used when using mask and such eq. CutoutComplex others: None, Cutout, CutoutFlying, CutoutPlant, CutoutSkin, Transparent, TransparentPostLight, MetaOverlay, Mote, MoteGlow -->
    </graphicData>
    <altitudeLayer>Building</altitudeLayer>    <!-- The layer this thing is rendered on. Usually the same value as category. -->
    <passability>PassThroughOnly</passability>    <!-- Whether itâ€™s traversable or not.  Standable, PassThroughOnly, Impassable -->
    <fillPercent>0.5</fillPercent>    <!-- How much cover it will provide. 0.0 to 1.0 -->
    <pathCost>70</pathCost>    <!-- how hard it is to walk through -->
    <canOverlapZones>false</canOverlapZones>    <!-- zones as in storage zones, growing zones, etc -->
    <castEdgeShadows>true</castEdgeShadows>
    <size>(3,3)</size>    <!-- Ingame cell/ground size (x,y) -->
    <minifiedDef>MinifiedThing</minifiedDef>    <!-- Sets if a item should be moveable vanilla reinstall/uninstall -->
    <thingCategories>
      <li>BuildingsAutomation</li>
    </thingCategories>
    <constructionSkillPrerequisite>5</constructionSkillPrerequisite>    <!-- Sets needed cunstruction skill to craft stuff -->
    <tickerType>Normal</tickerType>    <!-- How often game will request readout on time/progress dosent affect speed (normal, long, rare, never) -->
    <rotatable>false</rotatable>    <!-- allow rotation or not, can be used with or without Graphic_Multi  -->
    <neverMultiSelect>true</neverMultiSelect>    <!-- Whether clicking twice on this thing won't select all similar things on screen. Defaults to False, making multiselecting a default behaviour. -->
    <designationCategory>Industrial</designationCategory>    <!--architect menu location-->
    <staticSunShadowHeight>0.3</staticSunShadowHeight>    <!-- staticSunShadowHeight defines how much of a shadow the strucure casts (Range: 0.0 - 1.0) -->
    <drawGUIOverlay>true</drawGUIOverlay>    <!-- Whether GUI will show up when you select this thing. -->
    <inspectorTabs>      <!-- A list of ITabs that will show up in the inspector when you select this item. These ITabs are for example the "Bills" buttons (ITab_Bills) and the art description (ITab_Art). -->
      <li>ProjectRimFactory.SAL3.UI.ITab_SAL3Bills</li>      <!-- Setup bills for assemblers -->
    </inspectorTabs>
    <comps>      <!-- 	A C# class describing what should happen when the thing is interacted with in a specific way. This class might need additional tags to work. -->
      <li>
        <compClass>ProjectRimFactory.Common.CompOutputAdjustable</compClass>        <!-- set output if thingclass allows it -->
      </li>
      <li Class="CompProperties_Flickable" />
      <!-- option to power off -->
      <li>
        <compClass>ProjectRimFactory.Common.CompPRFHelp</compClass>        <!-- PRF Internal help tab/icon setup in language -->
      </li>
    </comps>
  </ThingDef>

  <!--====================Universal assembler====================-->
  <ThingDef ParentName="PRF_AssemblerBase">
    <defName>UniversalAssembler</defName>    <!-- The defName, in-script name, of this item that can be referred to by C# or other XML files. -->
    <label>assembler</label>    <!-- The in-game (as opposed to in-script defName) name for this item in lowercase. The game automatically makes the first character uppercase. -->
    <designatorDropdown>assembler_gr</designatorDropdown>    <!-- Use Dropdown Group -->
    <thingClass>ProjectRimFactory.SAL3.Things.Assemblers.Building_SmartAssembler</thingClass>    <!-- What C# class to call when doing anything with this thing. Unless you know what you're doing, it's suggested to use the same thingClass similar things use. -->
    <graphicData>
      <graphicClass>Graphic_Single</graphicClass>      <!-- for being able to swap between textures each rotation -->
      <texPath>SAL3/smart_assembler</texPath>      <!-- The path relative to ../Textures/ in which this thing's texture is stored. -->
    </graphicData>
    <costList>      <!-- cost list for fixed prices, uses def names -->
      <PRFRoboticArm>2</PRFRoboticArm>
      <PRFMachineFrame>1</PRFMachineFrame>
      <Steel>120</Steel>
      <Plasteel>10</Plasteel>
    </costList>
    <description>An automatic assembler controlled by a computer. Despite being called an assembler, it's also capable of simpler procedures such as cutting stone blocks, and refinery work.\n\nDownloads recipes from an adjacent recipe database.</description>    <!-- The description for this item, shown when the item's information tab is opened. You can use escape characters in this string, like \n for a newline. -->
    <statBases>
      <MaxHitPoints>250</MaxHitPoints>
      <WorkToBuild>2500</WorkToBuild>
      <MarketValue>1000</MarketValue>      <!-- 	The "market value" of this thing. Please note that sellPriceFactor halves this value when selling the thing, and that the Social skill influences the actual value. -->
    </statBases>
    <building>
      <canPlaceOverWall>true</canPlaceOverWall>      <!-- To be able to build as walls -->
    </building>
    <!-- <passability>Impassable</passability> -->    <!-- to be able to build them as walls -->
    <comps>
      <li Class="CompProperties_Breakdownable"/>
      <!-- enable breakdown of machines -->
      <li Class="CompProperties_Power">        <!-- enable Power usage -->
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>625</basePowerConsumption>        <!-- set power uge -->
      </li>
      <li Class="CompProperties_HeatPusher">        <!-- Produce fixed amount of heat while on -->
        <compClass>CompHeatPusherPowered</compClass>
        <heatPerSecond>3</heatPerSecond>        <!-- Vanilla stove create 5 -->
      </li>
      <li Class="ProjectRimFactory.SAL3.Things.CompProperties_RecipeImportRange">
        <range>3</range>
        <ghostColor>(0,1,1,1)</ghostColor>
      </li>
    </comps>
    <researchPrerequisites>      <!-- Needed Research to see in menus -->
      <li>UniversalAutocrafting</li>
    </researchPrerequisites>
    <rotatable>true</rotatable>    <!-- for being able to swap between textures each rotation -->
    <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <drawStatus>true</drawStatus>
        <doEffect>false</doEffect>
        <skillLevel>10</skillLevel>
        <artSkillLevel>9</artSkillLevel>
      </li>
    </modExtensions>
  </ThingDef>


  <!--====================Selfcorrecting assembler====================-->
  <ThingDef ParentName="PRF_AssemblerBase">
    <defName>MachineLearningAssembler</defName>
    <label>adaptive assembler</label>
    <designatorDropdown>assembler_gr</designatorDropdown>
    <thingClass>ProjectRimFactory.SAL3.Things.Assemblers.Special.Building_Assembler_Learning</thingClass>
    <graphicData>
      <graphicClass>Graphic_Single</graphicClass>
      <texPath>SAL3/correcting_assembler</texPath>
    </graphicData>
    <costList>
      <PRFRoboticArm>2</PRFRoboticArm>
      <PRFWeakAIChip>1</PRFWeakAIChip>
      <PRFMachineFrameLarge>1</PRFMachineFrameLarge>
      <Plasteel>10</Plasteel>
      <Steel>150</Steel>
      <ComponentIndustrial>2</ComponentIndustrial>
    </costList>
    <description>An automatic assembler controlled by a primitive AI.\n\nThe simple artificial neural network enables it to learn; to be more precise and efficient at individual recipes. Slowly overwrites currently unused recipe algorithms, as it has limited processing and memory capacity.\n\nDownloads recipes from an adjacent recipe database.</description>
    <statBases>
      <MaxHitPoints>350</MaxHitPoints>
      <WorkToBuild>3000</WorkToBuild>
      <MarketValue>1250</MarketValue>
    </statBases>
    <building>
      <canPlaceOverWall>true</canPlaceOverWall>      <!-- To be able to build as walls -->
    </building>
    <!-- <passability>Impassable</passability> -->    <!-- to be able to build them as walls -->
    <comps>
      <li Class="CompProperties_Power">
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>700</basePowerConsumption>
      </li>
      <li Class="CompProperties_Glower">
        <glowRadius>6</glowRadius>
        <glowColor>(115,198,206,0)</glowColor>
      </li>
      <li Class="ProjectRimFactory.SAL3.Things.CompProperties_RecipeImportRange">
        <range>4</range>
        <ghostColor>(0,1,1,1)</ghostColor>
      </li>
    </comps>
    <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <drawStatus>true</drawStatus>
        <doEffect>false</doEffect>
        <skillLevel>20</skillLevel>
        <artSkillLevel>12</artSkillLevel>
      </li>
    </modExtensions>
    <researchPrerequisites>
      <li>SelfCorrectingAssemblers</li>
    </researchPrerequisites>
    <rotatable>true</rotatable>    <!-- for being able to swap between textures each rotation -->
  </ThingDef>


  <!--==================== Recipe database ====================-->
  <ThingDef ParentName="PRFBuildingBase">
    <defName>RecipeDatabase</defName>
    <label>recipe database</label>
    <thingClass>ProjectRimFactory.SAL3.Things.Building_RecipeHolder</thingClass>
    <designatorDropdown>assembler_gr</designatorDropdown>
    <graphicData>
      <texPath>SAL3/DISK_HARDWARE4</texPath>
      <graphicClass>Graphic_Multi</graphicClass>
      <drawSize>(1,1)</drawSize>
    </graphicData>
    <rotatable>true</rotatable>
    <altitudeLayer>Building</altitudeLayer>
    <passability>PassThroughOnly</passability>
    <fillPercent>0.5</fillPercent>
    <pathCost>70</pathCost>
    <canOverlapZones>false</canOverlapZones>
    <castEdgeShadows>true</castEdgeShadows>
    <statBases>
      <WorkToBuild>800</WorkToBuild>
      <MaxHitPoints>150</MaxHitPoints>
      <Flammability>1.0</Flammability>
      <Mass>25</Mass>
    </statBases>
    <minifiedDef>MinifiedThing</minifiedDef>
    <thingCategories>
      <li>BuildingsAutomation</li>
    </thingCategories>
    <description>Imports recipes from adjacent work tables. Uploads recipes to adjacent assemblers.\n\nI wonder what all these other buttons do...</description>
    <costList>
      <PRFMachineFrame>1</PRFMachineFrame>
      <Steel>20</Steel>
      <ComponentIndustrial>1</ComponentIndustrial>
      <RimFactory_Data_Disk>1</RimFactory_Data_Disk>
    </costList>
    <tickerType>Normal</tickerType>
    <neverMultiSelect>true</neverMultiSelect>
    <designationCategory>Industrial</designationCategory>
    <staticSunShadowHeight>0.1</staticSunShadowHeight>
    <constructEffect>ConstructMetal</constructEffect>
    <comps>
      <li Class="CompProperties_Power">
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>250</basePowerConsumption>
      </li>
      <li Class="CompProperties_Glower">
        <glowRadius>3</glowRadius>
        <glowColor>(115,198,206,0)</glowColor>
      </li>
      <li Class="ProjectRimFactory.SAL3.Things.CompProperties_RecipeImportRange">
        <range>2</range>
        <ghostColor>(0,1,1,1)</ghostColor>
      </li>
    </comps>
    <researchPrerequisites>
      <li>MagneticTape</li>
    </researchPrerequisites>
  </ThingDef>

  <!--==================== T1 Cooker ====================-->
  <ThingDef ParentName="PRF_AssemblerBase">
    <defName>SelfCooker</defName>
    <label>industrial cooker</label>
    <designationCategory>Industrial</designationCategory>
    <designatorDropdown>assembler_food_gr</designatorDropdown>
    <thingClass>ProjectRimFactory.SAL3.Things.Assemblers.Building_SimpleAssembler</thingClass>
    <drawerType>RealtimeOnly</drawerType>
    <graphicData>
      <graphicClass>Graphic_Single</graphicClass>      <!-- for being able to swap between textures each rotation -->
      <texPath>SAL3/cooker1</texPath>
    </graphicData>
    <statBases>
      <MaxHitPoints>250</MaxHitPoints>
      <WorkToBuild>2000</WorkToBuild>
      <MarketValue>700</MarketValue>
      <Cleanliness>5</Cleanliness>
    </statBases>
    <blockLight>false</blockLight>    <!-- 	Whether this building can block light or not. -->
    <blockWind>true</blockWind>    <!-- 	Whether this building can block wind or not. -->
    <description>An assortment of food processing modules which can peel, mince, chop, mix, cook, steam, grill, and bake ingredients into more or less delicious meals and other edible products.\n\nNever ruin a meal again with your one-stop solution to satisfy all your colony's sustenance needs. Just look at it go! \n\n 1x speed \n 5cleanliness \n cook level 10</description>
    <costStuffCount>100</costStuffCount>
    <costList>
      <PRFRoboticArm>2</PRFRoboticArm>
      <PRFMachineFrameSmall>1</PRFMachineFrameSmall>
      <Steel>10</Steel>
    </costList>
    <comps>
      <li Class="CompProperties_Breakdownable"/>
      <li Class="CompProperties_Power">
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>400</basePowerConsumption>
      </li>
      <li Class="CompProperties_HeatPusher">
        <compClass>CompHeatPusherPowered</compClass>
        <heatPerSecond>5</heatPerSecond>
      </li>
    </comps>
    <recipes>      <!-- Defines recipe to make it in ThingDef directly.	 (extra from importrecipesfrom) -->
      <li>MakeNutrientPaste</li>
      <li>MakeNutrientPasteBulk</li>
    </recipes>
    <building>
      <canPlaceOverWall>true</canPlaceOverWall>      <!-- To be able to build as walls -->
      <isMealSource>true</isMealSource>      <!-- So it's whether or not to show that warning on the right of the screen" You need a meal source" "Either build a NPD or a Stove or a Firepit or whatever the description says" -->
    </building>
    <passability>Impassable</passability>    <!-- to be able to build them as walls -->
    <researchPrerequisites>
      <li>SelfCooking</li>
    </researchPrerequisites>
    <rotatable>false</rotatable>    <!-- for being able to swap between textures each rotation -->
    <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <importRecipesFrom>
          <li>ElectricStove</li>
        </importRecipesFrom>        <!-- import same bills as vanilla electric stove have -->
        <workSpeedBaseFactor>1</workSpeedBaseFactor>
        <skillLevel>10</skillLevel>
        <drawStatus>true</drawStatus>
        <doEffect>true</doEffect>
      </li>
    </modExtensions>
  </ThingDef>

  <!--==================== T3 Spacer Cooker ====================-->
  <ThingDef ParentName="PRF_AssemblerBase">
    <defName>PRF_SpacerCooker</defName>
    <label>spacer cooker</label>
    <designationCategory>Industrial</designationCategory>
    <designatorDropdown>assembler_food_gr</designatorDropdown>
    <thingClass>ProjectRimFactory.SAL3.Things.Assemblers.Building_SimpleAssembler</thingClass>
    <drawerType>RealtimeOnly</drawerType>
    <graphicData>
      <graphicClass>Graphic_Single</graphicClass>      <!-- for being able to swap between textures each rotation -->
      <texPath>SAL3/SpacerCooker</texPath>
    </graphicData>
    <statBases>
      <MaxHitPoints>250</MaxHitPoints>
      <WorkToBuild>3000</WorkToBuild>
      <MarketValue>700</MarketValue>
      <Cleanliness>20</Cleanliness>
    </statBases>
    <blockLight>false</blockLight>    <!-- 	Whether this building can block light or not. -->
    <blockWind>true</blockWind>    <!-- 	Whether this building can block wind or not. -->
    <description>An assortment of food processing modules which can peel, mince, chop, mix, cook, steam, grill, and bake ingredients into more or less delicious meals and other edible products.\n\nNever ruin a meal again with your one-stop solution to satisfy all your colony's sustenance needs. Just look at it go! \n\n 2x speed \n 20cleanliness \n cook level 20</description>
    <costStuffCount>100</costStuffCount>
    <costList>
      <PRFRoboticArm>2</PRFRoboticArm>
      <PRFMachineFrameLarge>1</PRFMachineFrameLarge>
      <Steel>10</Steel>
    </costList>
    <comps>
      <li Class="CompProperties_Power">
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>600</basePowerConsumption>
      </li>
      <li Class="CompProperties_Glower">
        <glowRadius>6</glowRadius>
        <glowColor>(115,198,206,0)</glowColor>
      </li>
      <li Class="CompProperties_HeatPusher">
        <compClass>CompHeatPusherPowered</compClass>
        <heatPerSecond>5</heatPerSecond>
      </li>
      <li Class="ProjectRimFactory.Common.CompProperties_GlowerPulse">
        <minGlowRadius>1</minGlowRadius>
        <maxGlowRadius>3</maxGlowRadius>
        <minGlowColor>(100,0,0,10)</minGlowColor>
        <maxGlowColor>(230,0,0,100)</maxGlowColor>
        <intervalTicks>30</intervalTicks>
        <easingType>ProjectRimFactory.Common.EasingCubicIn</easingType>        <!-- easingType : see more here: https://easings.net or in top of this file -->
      </li>
      <li Class="ProjectRimFactory.Common.CompProperties_PowerWorkSetting">
        <!-- speed settings -->
        <speedSetting>true</speedSetting>
        <minPowerForSpeed>0</minPowerForSpeed>
        <minSpeedFactor>1</minSpeedFactor>
        <maxPowerForSpeed>3000</maxPowerForSpeed>
        <maxSpeedFactor>3</maxSpeedFactor>
        <!-- range settings -->
        <rangeSetting>true</rangeSetting>
        <minPowerForRange>0</minPowerForRange>
        <minRange>1</minRange>
        <maxPowerForRange>1300</maxPowerForRange>
        <maxRange>4</maxRange>
        <rangeType>ProjectRimFactory.Common.RectRange</rangeType>
        <!-- range color settings
        <blueprintMin>(1,1,1,1)</blueprintMin>
        <blueprintMax>(0.5,0.5,0.5,0.6)</blueprintMax>
        <instance>(1,1,1,1)</instance>
        <otherInstance>(1,1,1,0.35)</otherInstance>
        -->
      </li>
    </comps>
    <inspectorTabs>
      <li>ProjectRimFactory.Common.ITab_PowerSupply</li>      <!-- Power boost -->
    </inspectorTabs>
    <recipes>      <!-- Defines recipe to make it in ThingDef directly.	 (extra from importrecipesfrom) -->
      <li>MakeNutrientPaste</li>
      <li>MakeNutrientPasteBulk</li>
    </recipes>
    <building>
      <canPlaceOverWall>true</canPlaceOverWall>      <!-- To be able to build as walls -->
      <isMealSource>true</isMealSource>      <!-- So it's whether or not to show that warning on the right of the screen" You need a meal source" "Either build a NPD or a Stove or a Firepit or whatever the description says" -->
    </building>
    <passability>Impassable</passability>    <!-- to be able to build them as walls -->
    <researchPrerequisites>
      <li>SelfCooking</li>
      <li>SelfCorrectingAssemblers</li>
    </researchPrerequisites>
    <rotatable>true</rotatable>    <!-- for being able to swap between textures each rotation -->
    <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <importRecipesFrom>          <!-- import same bills as vanilla electric stove have -->
          <li>ElectricStove</li>
        </importRecipesFrom>
        <workSpeedBaseFactor>1</workSpeedBaseFactor>
        <skillLevel>20</skillLevel>
        <artSkillLevel>10</artSkillLevel>
        <workingGraphicData>
          <graphicClass>Graphic_Single</graphicClass>
          <texPath>SAL3/SpacerCookerWorking</texPath>
          <drawSize>(3,3)</drawSize>
        </workingGraphicData>
        <drawStatus>true</drawStatus>
        <doEffect>true</doEffect>
        <powerOffGraphicData>
          <graphicClass>Graphic_Multi</graphicClass>
          <texPath>SAL3/AutoCookerPowerOff</texPath>
          <drawSize>(3,3)</drawSize>
        </powerOffGraphicData>
      </li>
    </modExtensions>
  </ThingDef>

  <!--====================Meat Grinder====================-->
  <ThingDef ParentName="PRF_AssemblerBase">
    <defName>MeatGrinder</defName>
    <label>meat grinder</label>
    <designatorDropdown>assembler_food_gr</designatorDropdown>
    <thingClass>ProjectRimFactory.SAL3.Things.Assemblers.Building_SimpleAssembler</thingClass>
    <graphicData>
      <texPath>SAL3/smart_butcher</texPath>
      <drawSize>(2.1,2.1)</drawSize>
      <damageData>
        <cornerTL>Damage/Corner</cornerTL>
        <cornerTR>Damage/Corner</cornerTR>
        <cornerBL>Damage/Corner</cornerBL>
        <cornerBR>Damage/Corner</cornerBR>
      </damageData>
    </graphicData>
    <statBases>
      <MaxHitPoints>200</MaxHitPoints>
      <WorkToBuild>2500</WorkToBuild>
      <MarketValue>700</MarketValue>
      <Beauty>-25</Beauty>      <!-- this is pretty grose -->
      <Cleanliness>0</Cleanliness>      <!-- INFO -->
    </statBases>
    <size>(2,2)</size>
    <description>Precise grinder which processes corpses into piles of usable materials: meat, leather, etc.</description>
    <costStuffCount>100</costStuffCount>
    <surfaceType>Item</surfaceType>
    <costList>
      <PRFRoboticArm>2</PRFRoboticArm>
      <PRFMachineFrameSmall>1</PRFMachineFrameSmall>
      <Steel>10</Steel>
    </costList>
    <comps>
      <li Class="CompProperties_Breakdownable"/>
      <li Class="CompProperties_Power">
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>400</basePowerConsumption>
      </li>
      <li Class="CompProperties_HeatPusher">
        <compClass>CompHeatPusherPowered</compClass>
        <heatPerSecond>2</heatPerSecond>
      </li>
    </comps>
    <!--<recipes></recipes>-->
    <researchPrerequisites>
      <li>SelfCooking</li>
    </researchPrerequisites>
    <rotatable>false</rotatable>
    <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <importRecipesFrom>
          <li>TableButcher</li>
        </importRecipesFrom>
        <drawStatus>true</drawStatus>
        <doEffect>true</doEffect>
        <skillLevel>10</skillLevel>
        <artSkillLevel>0</artSkillLevel>
        <workingGraphicData>
          <graphicClass>Graphic_Single</graphicClass>
          <texPath>SAL3/smart_butcher_working</texPath>
          <drawSize>(2.1,2.1)</drawSize>
        </workingGraphicData>
      </li>
    </modExtensions>
    <placeWorkers>      <!-- Restrictor when placing the building. -->
      <li>PlaceWorker_PreventInteractionSpotOverlap</li>
    </placeWorkers>
  </ThingDef>

  <!--====================Fermenting Barrel====================-->
  <ThingDef ParentName="PRF_AssemblerBase">
    <defName>PRFFermentingBarrel</defName>
    <label>fermenting tank</label>
    <designatorDropdown>assembler_food_gr</designatorDropdown>
    <description>Fully automated fermenting. Self-regulates temperature to maintain the best quality.</description>
    <thingClass>ProjectRimFactory.SAL3.Things.Assemblers.Building_SimpleAssembler</thingClass>
    <graphicData>
      <texPath>SAL3/brewer</texPath>
      <graphicClass>Graphic_Single</graphicClass>
      <drawSize>(1.8,1.8)</drawSize>
    </graphicData>
    <size>(1,1)</size>
    <altitudeLayer>Building</altitudeLayer>
    <fillPercent>1.0</fillPercent>
    <pathCost>60</pathCost>
    <uiIconScale>0.6</uiIconScale>
    <statBases>
      <WorkToBuild>600</WorkToBuild>
      <Mass>17</Mass>
      <MaxHitPoints>150</MaxHitPoints>
      <Flammability>1.0</Flammability>
      <MarketValue>150</MarketValue>
    </statBases>
    <costList>
      <PRFRoboticArm>1</PRFRoboticArm>
      <PRFMachineFrameSmall>1</PRFMachineFrameSmall>
      <Steel>100</Steel>
    </costList>
    <comps>
      <li Class="CompProperties_Breakdownable"/>
      <li Class="CompProperties_Power">
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>100</basePowerConsumption>
      </li>
    </comps>
    <recipes>
      <li>BrewBeer_sixpack</li>
      <li>BrewBeer_case</li>
      <li>BrewBeer_keg</li>
    </recipes>
    <rotatable>False</rotatable>
    <designationCategory>Industrial</designationCategory>
    <researchPrerequisites>
      <li>Brewing</li>
      <li>SelfCooking</li>
    </researchPrerequisites>
    <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <doEffect>false</doEffect>
        <drawStatus>true</drawStatus>
        <skillLevel>10</skillLevel>
        <artSkillLevel>0</artSkillLevel>
      </li>
    </modExtensions>
  </ThingDef>

  <!--==================== Food Prepper ====================-->
  <ThingDef ParentName="PRF_AssemblerBase">
    <defName>SelfPrepper</defName>
    <label>industrial food processor</label>
    <size>(2,2)</size>
    <designationCategory>Industrial</designationCategory>
    <designatorDropdown>assembler_food_gr</designatorDropdown>
    <thingClass>ProjectRimFactory.SAL3.Things.Assemblers.Building_SimpleAssembler</thingClass>
    <graphicData>
      <texPath>SAL3/smart_prepper</texPath>
      <drawSize>(2,2)</drawSize>
    </graphicData>
    <statBases>
      <WorkToBuild>2000</WorkToBuild>
      <MarketValue>700</MarketValue>
      <MaxHitPoints>200</MaxHitPoints>
    </statBases>
    <description>A machine designed to boil, grind, or mill raw food resources into ingredients more suitable for cooking and brewing.</description>
    <costStuffCount>100</costStuffCount>
    <costList>
      <PRFRoboticArm>2</PRFRoboticArm>
      <PRFMachineFrameSmall>1</PRFMachineFrameSmall>
      <Steel>10</Steel>
    </costList>
    <comps>
      <li Class="CompProperties_Power">
        <compClass>CompPowerTrader</compClass>
        <basePowerConsumption>400</basePowerConsumption>
      </li>
    </comps>
    <recipes>
    </recipes>
    <building>
      <canPlaceOverWall>true</canPlaceOverWall>      <!-- To be able to build as walls -->
    </building>
    <researchPrerequisites>
      <li>SelfCooking</li>
    </researchPrerequisites>
    <rotatable>false</rotatable>
    <modExtensions>
      <li Class="ProjectRimFactory.SAL3.Exposables.AssemblerDefModExtension">
        <importRecipesFrom>
          <li>Brewery</li>
        </importRecipesFrom>        <!-- import same bills as vanilla electric stove have -->
        <doEffect>false</doEffect>
        <drawStatus>true</drawStatus>
        <skillLevel>10</skillLevel>
        <artSkillLevel>0</artSkillLevel>
      </li>
    </modExtensions>
  </ThingDef>

</Defs>
